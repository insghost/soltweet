{"version":3,"sources":["schemas.ts","css-variables.ts","components/container.tsx","components/tweet.tsx","components/button.tsx","components/write-tweet.tsx","utils/getWeb3.js","utils/init.ts","components/create-account.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["user","schema","Entity","tweetSchema","author","spaceHalfX","concat","space","space1X","space2X","horizontalPageMargin","horizontalPageMarginSmall","contentWidth","mq","jsx","Container","_ref","children","containerStyles","_ref$horizontal","horizontal","_ref$maxWidth","maxWidth","_ref$mobileHorizontal","mobileHorizontal","_ref$mobileVertical","mobileVertical","_ref$vertical","vertical","Div","styled","div","_templateObject","Object","core_browser_esm","Tweet","tweet","likeTweet","css","tweet_templateObject","colors","darkestGrey","darkGrey","lightGrey","_templateObject2","white","text","likeCount","onClick","id","Button","button_templateObject","blue","lightBlue","WriteTweet","state","tweetText","setTweetText","event","_this","setState","target","value","submitTweet","props","handleSubmitTweet","write_tweet_templateObject","write_tweet_templateObject2","onChange","this","components_button","React","Component","getWeb3","Promise","resolve","reject","window","addEventListener","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","init","_x","_init","apply","arguments","compiledContract","contractAddress","accounts","networkId","deployedNetwork","deployedAddress","instance","sent","eth","getAccounts","net","getId","networks","address","Contract","abi","contract","setup","alert","error","CreateAccount","username","setUsername","createAccount","create_account_templateObject","create_account_templateObject2","App","tweets","store","result","entities","componentDidMount","bind","assertThisInitialized","SolTweet","getContract","Error","getUserId","userId","fetchTweets","_callee2","numberOfTweets","i","_context2","methods","_getNumberOfTweets","call","fetchTweet","_callee3","tweetId","_this$state","_context3","_likeTweet","send","from","handleLikeCountChange","_callee4","err","res","_res$returnValues","_context4","abrupt","returnValues","objectSpread","_callee5","authorId","likes","normalized","_context5","users","events","LikeCountChange","filter","toString","normalize","computeFollowing","_callee6","keys","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","followingUserId","_context6","_getFollowingMappingKeys","undefined","Symbol","iterator","done","followingMapping","toConsumableArray","return","finish","push","handleNewTweet","_callee7","_context7","_callee8","userHasAccount","_username","following","_context8","ownerHasAccount","ownerToUser","NewTweet","_callee9","_ref9","_context9","_createTweet","_callee10","_context10","_createUser","updateTweets","_this2","_this$state2","container","styles","App_templateObject","App_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","write_tweet","react_default","Fragment","create_account","_templateObject7","_templateObject8","map","components_tweet","key","Boolean","location","hostname","match","__webpack_require__","d","__webpack_exports__","ReactDOM","render","createElement","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2a0863b.chunk.js","sourcesContent":["import { normalize, schema } from 'normalizr'\nimport { Tweet } from './types/types'\n\nconst user = new schema.Entity('users')\n\nexport const tweetSchema = new schema.Entity('tweets', {\n  author: user,\n})\n","// content spacing\nconst space = 0.75\n\nexport const spaceHalfX = `${space / 2}rem`\nexport const space1X = `${space}rem`\nexport const space2X = `${space * 2}rem`\nexport const space3X = `${space * 3}rem`\nexport const space4X = `${space * 4}rem`\nexport const space8X = `${space * 8}rem`\n\nexport const intraSectionMargin = space4X\nexport const intraSectionMarginSmall = space3X\nexport const halfIntraSectionMargin = space2X\n\nexport const halfHorizontalPageMargin = `${space * 5}rem`\nexport const horizontalPageMargin = `${space * 10}rem`\nexport const horizontalPageMarginSmall = `${space * 1.5}rem` // Mobile container margin\nexport const editProfileHorizontalPageMargin = `${space * 35}rem`\nexport const contentWidth = `${space * 120}rem`\n\n/* media queries */\nexport const mq = {\n  aboveDesktop: '1025px',\n  aboveTablet: '769px',\n  aboveMobile: '481px',\n  desktop: '1024px',\n  tablet: '768px',\n  mobile: '480px',\n}\n","import { css, jsx, SerializedStyles } from '@emotion/core'\nimport React, { SFC } from 'react'\nimport {\n  contentWidth,\n  horizontalPageMargin,\n  horizontalPageMarginSmall,\n  mq,\n} from '../css-variables'\nimport styled from '@emotion/styled'\nimport { Tweet as TweetType } from '../types/types'\nimport { space2X, space1X, spaceHalfX } from '../css-variables'\n/** @jsx jsx */\n// WTF emotion?!\njsx\n// This component should be used to wrap our content.\n// It will keep the content margins consistent throughout the app.\n\ninterface IProps {\n  containerStyles?: SerializedStyles\n  horizontal?: string\n  maxWidth?: string\n  mobileHorizontal?: string\n  mobileVertical?: string\n  vertical?: string\n}\n\nconst Container: SFC<IProps> = ({\n  children,\n  containerStyles,\n  horizontal = horizontalPageMargin,\n  maxWidth = contentWidth,\n  mobileHorizontal = horizontalPageMarginSmall,\n  mobileVertical = '0',\n  vertical = '0',\n}) => {\n  const Div = styled.div`\n    display: block;\n    margin: ${space2X} auto;\n    max-width: ${maxWidth};\n    padding: ${vertical} ${horizontal};\n    position: relative;\n\n    @media (max-width: ${mq.tablet}) {\n      padding: ${vertical} ${mobileHorizontal};\n    }\n\n    @media (max-width: ${mq.mobile}) {\n      padding: ${mobileVertical} ${mobileHorizontal};\n    }\n\n    ${containerStyles};\n  `\n  return <Div>{children}</Div>\n}\n\nexport default Container\n","import { css, jsx } from '@emotion/core'\nimport React, { SFC } from 'react'\nimport { Tweet as TweetType } from '../types/types'\nimport { space2X, space1X, spaceHalfX } from '../css-variables'\nimport { colors } from '..'\n/** @jsx jsx */\n// WTF emotion?!\njsx\n\ninterface IProps {\n  likeTweet: Function\n  tweet: TweetType\n}\n\nconst Tweet: SFC<IProps> = ({ tweet, likeTweet }) => {\n  return (\n    <div\n      css={css`\n        background: ${colors.darkestGrey};\n\n        border-top: solid 1px;\n        border-bottom: solid 0px;\n        /* Reversed column direction */\n        &:first-of-type {\n          border-bottom: solid 1px;\n        }\n\n        padding: ${space1X} ${space2X};\n        display: flex;\n        flex-direction: column;\n\n        &:hover {\n          background: ${colors.darkGrey};\n        }\n\n        /* Overrides &:first-of-type */\n        && {\n          border-color: ${colors.lightGrey};\n        }\n      `}\n    >\n      <h3\n        css={css`\n          margin-bottom: ${spaceHalfX};\n          color: ${colors.white};\n        `}\n      >\n        {tweet.author}\n      </h3>\n      <p>{tweet.text}</p>\n      <p>Like Count: {tweet.likeCount}</p>\n      <p onClick={() => likeTweet(tweet.id)}>Like</p>\n    </div>\n  )\n}\n\nexport default Tweet\n","import { css, jsx, SerializedStyles } from '@emotion/core'\nimport React, { SFC, ReactNode } from 'react'\nimport {\n  contentWidth,\n  horizontalPageMargin,\n  horizontalPageMarginSmall,\n  mq,\n} from '../css-variables'\nimport styled from '@emotion/styled'\nimport { space2X, space1X, spaceHalfX } from '../css-variables'\nimport { colors } from '..'\n/** @jsx jsx */\n// WTF emotion?!\njsx\n// This component should be used to wrap our content.\n// It will keep the content margins consistent throughout the app.\n\ninterface IProps {\n  onClick?: (event: any) => void\n}\n\nconst Button: SFC<IProps> = ({ children, onClick }) => {\n  return (\n    <button\n      onClick={onClick}\n      css={css`\n        margin-top: 0.75rem;\n        background: ${colors.blue};\n        border: none;\n        border-radius: 4px;\n        font-size: 1.5rem;\n        color: white;\n        padding: 0.75rem 0;\n        min-width: 120px;\n        margin-left: auto;\n        margin-right: auto;\n        transition: all 100ms ease-in;\n\n        &:hover {\n          background: ${colors.lightBlue};\n          transition: all 200ms ease-out;\n        }\n      `}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","import React, { SFC, ChangeEvent } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\nimport Button from './button'\nimport { space2X, space1X } from '../css-variables'\n// WTF emotion?!\njsx\n\ninterface IProps {\n  handleSubmitTweet: Function\n}\n\nclass WriteTweet extends React.Component<IProps> {\n  state = { tweetText: '' }\n\n  setTweetText = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ tweetText: event.target.value })\n  }\n\n  submitTweet = () =>\n    this.props.handleSubmitTweet({\n      tweetText: this.state.tweetText,\n    })\n\n  render() {\n    return (\n      <div\n        css={css`\n          display: flex;\n          flex-direction: column;\n        `}\n      >\n        <h3>Write a tweet</h3>\n        <textarea\n          css={css`\n            border: none;\n            border-bottom: solid 1px;\n            margin-top: ${space1X};\n            min-height: 2.5rem;\n            resize: vertical;\n          `}\n          onChange={this.setTweetText}\n          value={this.state.tweetText}\n        />\n        <Button onClick={this.submitTweet}>Submit</Button>\n      </div>\n    )\n  }\n}\n\nexport default WriteTweet\n","import Web3 from 'web3'\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum)\n        try {\n          // Request account access if needed\n          await window.ethereum.enable()\n          // Acccounts now exposed\n          resolve(web3)\n        } catch (error) {\n          reject(error)\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3\n        console.log('Injected web3 detected.')\n        resolve(web3)\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          'http://127.0.0.1:9545'\n        )\n        const web3 = new Web3(provider)\n        console.log('No web3 instance injected, using Local web3.')\n        resolve(web3)\n      }\n    })\n  })\n\nexport default getWeb3\n","import getWeb3 from './getWeb3'\nimport App from '../App';\n\ninterface IArgs {\n  compiledContract: any\n  contractAddress?: string\n}\n\nexport async function init(this: App, {\n  compiledContract,\n  contractAddress,\n} : IArgs) {\n  try {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3()\n\n    // Use web3 to get the user's accounts.\n    const accounts = await web3.eth.getAccounts()\n\n    // Get the contract instance.\n    const networkId = await web3.eth.net.getId()\n    const deployedNetwork = (compiledContract as any).networks[networkId]\n\n    const deployedAddress = contractAddress ? contractAddress : deployedNetwork && deployedNetwork.address\n\n    const instance = new web3.eth.Contract(\n      compiledContract.abi,\n      deployedAddress\n      // '0x47267648c32753395f8d1dbfdc0ffbc86b3433a4'\n    )\n\n    // Set web3, accounts, and contract to the state, and then proceed with an\n    // example of interacting with the contract's methods.\n    this.setState({ web3, accounts, contract: instance })\n    this.setup()\n  } catch (error) {\n    // Catch any errors for any of the above operations.\n    alert(\n      `Failed to load web3, accounts, or contract Check console for details.`\n    )\n    console.error(error)\n  }\n}","import React, { SFC, ChangeEvent } from 'react'\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core'\n// WTF emotion?!\njsx\n\ninterface IProps {\n  createAccount: Function\n}\n\ninterface IState {\n  username: string\n}\n\nclass CreateAccount extends React.Component<IProps> {\n  state: IState = { username: '' }\n\n  setUsername = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ username: event.target.value })\n  }\n\n  createAccount = () => this.props.createAccount(this.state.username)\n\n  render() {\n    return (\n      <div\n        css={css`\n          display: flex;\n          flex-direction: column;\n        `}\n      >\n        <textarea onChange={this.setUsername} value={this.state.username} />\n        <button\n          css={css`\n            margin-top: 0.375rem;\n          `}\n          onClick={this.createAccount}\n        >\n          Create Account\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default CreateAccount\n","import React, { Component } from 'react'\nimport { normalize } from 'normalizr'\nimport { tweetSchema } from './schemas'\nimport './App.css'\nimport Container from './components/container'\nimport { jsx, css, Global } from '@emotion/core'\nimport Tweet from './components/tweet'\nimport WriteTweet from './components/write-tweet'\nimport {\n  Tweet as TweetType,\n  LikeCountChangeResult,\n  SolTweetContract,\n  NewTweetResult,\n} from './types/types'\nimport SolTweet from './contracts/SolTweet.json'\nimport { init } from './utils/init'\nimport CreateAccount from './components/create-account'\nimport { space2X, space1X, space4X, mq } from './css-variables'\nimport { colors } from '.'\nimport Button from './components/button'\njsx\n/** @jsx jsx */\ninterface HandleSubmitTweetArgs {\n  author: string\n  tweetText: string\n}\n\ninterface IState {\n  tweets: TweetType[]\n  web3: any\n  accounts: any\n  contract?: SolTweetContract\n  username?: string\n  userId?: number\n  store: {\n    result: string[]\n    entities: {\n      tweets: {\n        [key: string]: TweetType\n      }\n    }\n  }\n}\n\nclass App extends Component<{}, IState> {\n  state: IState = {\n    tweets: [],\n    web3: null,\n    accounts: null,\n    store: {\n      result: [],\n      entities: {\n        tweets: {},\n      },\n    },\n  }\n\n  componentDidMount = async () => {\n    await init.bind(this)({\n      compiledContract: SolTweet,\n      // For local dev, comment out contractAddress\n      contractAddress: '0x47267648c32753395f8d1dbfdc0ffbc86b3433a4',\n    })\n  }\n\n  getContract = () => {\n    const { contract } = this.state\n    if (!contract) {\n      throw new Error('contract not initialized')\n    }\n    return contract\n  }\n\n  getUserId = () => {\n    const { userId } = this.state\n    if (!userId) {\n      throw new Error('not logged in')\n    }\n    return userId\n  }\n\n  fetchTweets = async () => {\n    const { contract } = this.state\n    const numberOfTweets = await this.getContract()\n      .methods._getNumberOfTweets()\n      .call()\n    for (let i = 0; i < numberOfTweets; i++) {\n      await this.fetchTweet(i)\n    }\n  }\n\n  likeTweet = async (tweetId: number) => {\n    const { accounts, contract } = this.state\n    await this.getContract()\n      .methods._likeTweet(this.getUserId(), tweetId)\n      .send({ from: accounts[0] })\n  }\n\n  handleLikeCountChange = async (err: Error, res?: LikeCountChangeResult) => {\n    if (err || !res) {\n      // TODO implement an error toast\n      return\n    }\n    const { likeCount, tweetId } = res.returnValues\n    const { store } = this.state\n    const tweet = store.entities.tweets[tweetId]\n    tweet.likeCount = likeCount\n    this.setState({ store: { ...store } })\n  }\n\n  fetchTweet = async (tweetId: number) => {\n    const tweet = await this.getContract()\n      .methods.tweets(tweetId)\n      .call()\n    const { text, authorId, likes } = tweet\n    const author = await this.getContract()\n      .methods.users(authorId)\n      .call()\n    const { username } = author\n    this.getContract().events.LikeCountChange(\n      {\n        filter: {\n          tweetId: tweetId.toString(),\n        },\n      },\n      this.handleLikeCountChange\n    )\n\n    const { store } = this.state\n    const normalized = normalize(\n      {\n        author: username,\n        text,\n        likeCount: likes,\n        id: tweetId.toString(),\n      },\n      tweetSchema\n    )\n    store.entities.tweets = {\n      ...store.entities.tweets,\n      ...normalized.entities.tweets,\n    }\n    this.setState({ store: store })\n  }\n\n  computeFollowing = async (): Promise<number[]> => {\n    const userId = this.getUserId()\n    const keys = await this.getContract()\n      .methods._getFollowingMappingKeys(userId)\n      .call()\n    let result: number[] = []\n    for (let followingUserId of keys) {\n      const isFollowing = await this.getContract()\n        .methods.followingMapping(userId, followingUserId)\n        .call()\n      if (isFollowing) {\n        result = [...result, followingUserId]\n      }\n    }\n    result.push(userId)\n    return result\n  }\n\n  handleNewTweet = async (err: Error, res?: NewTweetResult) => {\n    if (err || !res) {\n      // TODO error toast\n      return\n    }\n    const { tweetId } = res.returnValues\n    await this.fetchTweet(tweetId)\n  }\n\n  setup = async () => {\n    const { accounts } = this.state\n    this.fetchTweets()\n    const userHasAccount = await this.getContract()\n      .methods.ownerHasAccount(accounts[0])\n      .call()\n    const userId = await this.getContract()\n      .methods.ownerToUser(accounts[0])\n      .call()\n    if (userHasAccount && userId) {\n      try {\n        const user = await this.getContract()\n          .methods.users(userId)\n          .call()\n        const { username } = user\n        this.setState({\n          userId,\n          username,\n        })\n      } catch (err) {\n        console.log('no user for address found')\n      }\n    }\n    const following: number[] = await this.computeFollowing()\n    this.getContract().events.NewTweet(\n      {\n        filter: {\n          userId: following,\n        },\n      },\n      this.handleNewTweet\n    )\n  }\n\n  handleSubmitTweet = async ({ tweetText }: HandleSubmitTweetArgs) => {\n    const { accounts } = this.state\n\n    const userId = this.getUserId()\n\n    await this.getContract()\n      .methods._createTweet(userId, tweetText)\n      .send({ from: accounts[0] })\n  }\n\n  createAccount = async (username: string) => {\n    const { accounts } = this.state\n\n    await this.getContract()\n      .methods._createUser(username)\n      .send({ from: accounts[0] })\n\n    const userId = await this.getContract()\n      .methods.ownerToUser(accounts[0])\n      .call()\n\n    this.setState({\n      username,\n      userId,\n    })\n  }\n\n  updateTweets = () => {\n    this.fetchTweets()\n  }\n\n  render() {\n    const { username, userId } = this.state\n    return (\n      <Container>\n        <Global\n          styles={css`\n            body {\n              background-color: ${colors.darkestGrey};\n              color: ${colors.white};\n            }\n          `}\n        />\n        <div>\n          <h1\n            css={css`\n              text-align: center;\n              color: ${colors.white};\n              font-weight: 900;\n            `}\n          >\n            SolTweet\n          </h1>\n          {userId ? (\n            <div\n              css={css`\n                display: flex;\n                flex-direction: row;\n\n                @media (max-width: ${mq.aboveTablet}) {\n                  flex-direction: column;\n                }\n              `}\n            >\n              <span\n                css={css`\n                  color: ${colors.lightGrey};\n                  flex-grow: 1;\n                  font-size: 1.25rem;\n                  font-weight: 700;\n\n                  @media (max-width: ${mq.aboveTablet}) {\n                    font-size: 1rem;\n                  }\n                `}\n              >\n                Logged in as\n                <span\n                  css={css`\n                    color: ${colors.white};\n                  `}\n                >\n                  {' '}\n                  {username}\n                </span>\n              </span>\n              <div\n                css={css`\n                  margin-top: 0;\n                  flex-grow: 1;\n\n                  @media (max-width: ${mq.aboveTablet}) {\n                    margin-top: ${space2X};\n                  }\n                `}\n              >\n                <WriteTweet handleSubmitTweet={this.handleSubmitTweet} />\n              </div>\n            </div>\n          ) : (\n            <>\n              <span>\n                This wallet does not have a user account. Create one to tweet.\n              </span>\n              <CreateAccount createAccount={this.createAccount} />\n            </>\n          )}\n        </div>\n        <div\n          css={css`\n            display: flex;\n            flex-direction: column;\n            margin: 0 auto;\n            margin-top: ${space2X};\n          `}\n        >\n          <div\n            css={css`\n              display: flex;\n              margin-bottom: ${space1X};\n              flex-direction: column-reverse;\n            `}\n          >\n            {Object.keys(this.state.store.entities.tweets).map(\n              (tweetId: string) => (\n                <Tweet\n                  tweet={this.state.store.entities.tweets[tweetId]}\n                  likeTweet={this.likeTweet}\n                  key={tweetId}\n                />\n              )\n            )}\n          </div>\n          <Button onClick={this.updateTweets}>Refresh</Button>\n        </div>\n      </Container>\n    )\n  }\n}\n\nexport default App\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nexport const colors = {\n  darkestGrey: '#16191f',\n  darkGrey: '#282c37',\n  lightGrey: '#9baec8',\n  white: '#d9e1e8',\n  blue: '#2b90d9',\n  lightBlue: '#419bdd',\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}